// <auto-generated />
using System;
using ITLab.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITLab.Migrations
{
    [DbContext(typeof(ITLab_DBContext))]
    partial class ITLab_DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITLab.Models.AttendeeUser", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("int");

                    b.Property<string>("UserUsername")
                        .HasColumnName("user_username")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("SessionId", "UserUsername")
                        .HasName("PK__Attendee__30F84A71354F7242");

                    b.HasIndex("UserUsername");

                    b.ToTable("AttendeeUser");
                });

            modelBuilder.Entity("ITLab.Models.Classroom", b =>
                {
                    b.Property<string>("Classid")
                        .HasColumnName("CLASSID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnName("CAMPUS")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Maxseats")
                        .IsRequired()
                        .HasColumnName("MAXSEATS")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Roomcategory")
                        .IsRequired()
                        .HasColumnName("ROOMCATEGORY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Classid")
                        .HasName("PK__Classroo__96D40B6C3B806A01");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("ITLab.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorUsername")
                        .IsRequired()
                        .HasColumnName("AUTHOR_USERNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Contenttext")
                        .IsRequired()
                        .HasColumnName("CONTENTTEXT")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUsername");

                    b.HasIndex("SessionId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ITLab.Models.Image", b =>
                {
                    b.Property<int>("Imagekey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IMAGEKEY")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image1")
                        .IsRequired()
                        .HasColumnName("Image")
                        .HasColumnType("image");

                    b.HasKey("Imagekey")
                        .HasName("PK__Image__ED2B567C00A2FF7D");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("ITLab.Models.ItlabUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("USERNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("FIRSTNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("LASTNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnName("USERNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnName("USERSTATUS")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnName("USERTYPE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ItlabUser");
                });

            modelBuilder.Entity("ITLab.Models.RegisterdUser", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("int");

                    b.Property<string>("UserUsername")
                        .HasColumnName("user_username")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("SessionId", "UserUsername")
                        .HasName("PK__Register__30F84A71C1E37909");

                    b.HasIndex("UserUsername");

                    b.ToTable("RegisterdUser");
                });

            modelBuilder.Entity("ITLab.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassroomClassid")
                        .IsRequired()
                        .HasColumnName("CLASSROOM_CLASSID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<TimeSpan>("Endhour")
                        .HasColumnName("ENDHOUR")
                        .HasColumnType("time");

                    b.Property<DateTime>("Eventdate")
                        .HasColumnName("EVENTDATE")
                        .HasColumnType("date");

                    b.Property<string>("HostUsername")
                        .IsRequired()
                        .HasColumnName("HOST_USERNAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Maxattendee")
                        .HasColumnName("MAXATTENDEE")
                        .HasColumnType("int");

                    b.Property<string>("Nameguest")
                        .HasColumnName("NAMEGUEST")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("SessionCalendarId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Starthour")
                        .HasColumnName("STARTHOUR")
                        .HasColumnType("time");

                    b.Property<string>("Stateenum")
                        .IsRequired()
                        .HasColumnName("STATEENUM")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("TITLE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Videourl")
                        .HasColumnName("VIDEOURL")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ClassroomClassid");

                    b.HasIndex("HostUsername");

                    b.HasIndex("SessionCalendarId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ITLab.Models.SessionCalendar", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("ENDDATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("STARTDATE")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("SessionCalendar");
                });

            modelBuilder.Entity("ITLab.Models.SessionMedia", b =>
                {
                    b.Property<int?>("Media")
                        .HasColumnName("MEDIA")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnName("Session_ID")
                        .HasColumnType("int");

                    b.HasIndex("SessionId");

                    b.ToTable("Session_MEDIA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ITLab.Models.AttendeeUser", b =>
                {
                    b.HasOne("ITLab.Models.Session", "Session")
                        .WithMany("AttendeeUser")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("AttendeeUsersession_id")
                        .IsRequired();

                    b.HasOne("ITLab.Models.ItlabUser", "UserUsernameNavigation")
                        .WithMany("AttendeeUser")
                        .HasForeignKey("UserUsername")
                        .HasConstraintName("ttendeeUserserusername")
                        .IsRequired();
                });

            modelBuilder.Entity("ITLab.Models.Feedback", b =>
                {
                    b.HasOne("ITLab.Models.ItlabUser", "AuthorUsernameNavigation")
                        .WithMany("Feedback")
                        .HasForeignKey("AuthorUsername")
                        .HasConstraintName("FeedbackAUTHORUSERNAME")
                        .IsRequired();

                    b.HasOne("ITLab.Models.Session", "Session")
                        .WithMany("Feedback")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_Feedback_session_id");
                });

            modelBuilder.Entity("ITLab.Models.RegisterdUser", b =>
                {
                    b.HasOne("ITLab.Models.Session", "Session")
                        .WithMany("RegisterdUser")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("RegisterdUsersessionid")
                        .IsRequired();

                    b.HasOne("ITLab.Models.ItlabUser", "UserUsernameNavigation")
                        .WithMany("RegisterdUser")
                        .HasForeignKey("UserUsername")
                        .HasConstraintName("RgisterdUsersrusername")
                        .IsRequired();
                });

            modelBuilder.Entity("ITLab.Models.Session", b =>
                {
                    b.HasOne("ITLab.Models.Classroom", "ClassroomClass")
                        .WithMany("Session")
                        .HasForeignKey("ClassroomClassid")
                        .HasConstraintName("SssionCLASSROOMCLASSID")
                        .IsRequired();

                    b.HasOne("ITLab.Models.ItlabUser", "HostUsernameNavigation")
                        .WithMany("Session")
                        .HasForeignKey("HostUsername")
                        .HasConstraintName("Session_HOST_USERNAME")
                        .IsRequired();

                    b.HasOne("ITLab.Models.SessionCalendar", "SessionCalendar")
                        .WithMany("Session")
                        .HasForeignKey("SessionCalendarId")
                        .HasConstraintName("SssionSssionCalendarId");
                });

            modelBuilder.Entity("ITLab.Models.SessionMedia", b =>
                {
                    b.HasOne("ITLab.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .HasConstraintName("SessionMEDIASession_ID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITLab.Models.ItlabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITLab.Models.ItlabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITLab.Models.ItlabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITLab.Models.ItlabUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
